# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'hillrsanewagain.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication,QWidget, QVBoxLayout, QPushButton, QFileDialog , QLabel, QTextEdit
from PyQt5.QtCore import *
import sys
from PyQt5.QtGui import QPixmap, QImage
from PIL import Image
from numpy import asarray
import numpy as np
import pandas
import random
import imageio
import time
import random
import sys
import os
import imghdr
from math import gcd
import sympy as sp
from datetime import datetime

class Ui_MainWindow(QWidget):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(631, 480)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 10, 631, 23))
        font = QtGui.QFont()
        font.setFamily("Berlin Sans FB Demi")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.label.setAutoFillBackground(False)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(30, 50, 251, 61))
        self.groupBox.setObjectName("groupBox")
        self.layoutWidget = QtWidgets.QWidget(self.groupBox)
        self.layoutWidget.setGeometry(QtCore.QRect(10, 20, 231, 31))
        self.layoutWidget.setObjectName("layoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.layoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.encBox = QtWidgets.QCheckBox(self.layoutWidget)
        self.encBox.setObjectName("encBox")
        self.encBox.stateChanged.connect(self.checkBox)
        self.horizontalLayout.addWidget(self.encBox)
        self.decBox = QtWidgets.QCheckBox(self.layoutWidget)
        self.decBox.setObjectName("decBox")
        self.decBox.stateChanged.connect(self.checkBox)
        self.horizontalLayout.addWidget(self.decBox)
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(340, 50, 261, 61))
        self.groupBox_2.setObjectName("groupBox_2")
        self.layoutWidget1 = QtWidgets.QWidget(self.groupBox_2)
        self.layoutWidget1.setGeometry(QtCore.QRect(10, 20, 241, 25))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.layoutWidget1)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.rsaBtn = QtWidgets.QPushButton(self.layoutWidget1)
        self.rsaBtn.setObjectName("rsaBtn")
        self.rsaBtn.clicked.connect(self.generateRSAKey)
        self.horizontalLayout_2.addWidget(self.rsaBtn)
        self.groupBox_3 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_3.setGeometry(QtCore.QRect(30, 120, 571, 61))
        self.groupBox_3.setObjectName("groupBox_3")
        self.layoutWidget2 = QtWidgets.QWidget(self.groupBox_3)
        self.layoutWidget2.setGeometry(QtCore.QRect(20, 20, 531, 31))
        self.layoutWidget2.setObjectName("layoutWidget2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.layoutWidget2)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.searchBar = QtWidgets.QLineEdit(self.layoutWidget2)
        self.searchBar.setObjectName("searchBar")
        self.horizontalLayout_3.addWidget(self.searchBar)
        self.searchBtn = QtWidgets.QPushButton(self.layoutWidget2)
        self.searchBtn.setObjectName("searchBtn")
        self.searchBtn.clicked.connect(self.getImage)
        self.horizontalLayout_3.addWidget(self.searchBtn)
        self.groupBox_4 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_4.setGeometry(QtCore.QRect(30, 190, 261, 211))
        self.groupBox_4.setObjectName("groupBox_4")
        self.encLbl = QtWidgets.QLabel(self.groupBox_4)
        self.encLbl.setGeometry(QtCore.QRect(10, 20, 241, 181))
        self.encLbl.setText("")
        self.encLbl.setObjectName("encLbl")
        self.groupBox_5 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_5.setGeometry(QtCore.QRect(340, 190, 261, 211))
        self.groupBox_5.setObjectName("groupBox_5")
        self.decLbl = QtWidgets.QLabel(self.groupBox_5)
        self.decLbl.setGeometry(QtCore.QRect(10, 20, 241, 181))
        self.decLbl.setText("")
        self.decLbl.setObjectName("decLbl")
        self.layoutWidget3 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget3.setGeometry(QtCore.QRect(30, 410, 571, 41))
        self.layoutWidget3.setObjectName("layoutWidget3")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.layoutWidget3)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.pubkeyBtn = QtWidgets.QPushButton(self.layoutWidget3)
        self.pubkeyBtn.setObjectName("pubkeyBtn")
        self.pubkeyBtn.clicked.connect(self.getKey)
        self.horizontalLayout_4.addWidget(self.pubkeyBtn)
        self.privkeyBtn = QtWidgets.QPushButton(self.layoutWidget3)
        self.privkeyBtn.setObjectName("privkeyBtn")
        self.privkeyBtn.clicked.connect(self.getKey1)
        self.horizontalLayout_4.addWidget(self.privkeyBtn)
        self.cipherkeyBtn = QtWidgets.QPushButton(self.layoutWidget3)
        self.cipherkeyBtn.setObjectName("cipherkeyBtn")
        self.cipherkeyBtn.clicked.connect(self.getKey)
        self.horizontalLayout_4.addWidget(self.cipherkeyBtn)
        self.processBtn = QtWidgets.QPushButton(self.layoutWidget3)
        self.processBtn.setObjectName("processBtn")
        self.processBtn.clicked.connect(self.crypto)
        self.horizontalLayout_4.addWidget(self.processBtn)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.DATESTRING = datetime.strftime(datetime.now(), '%Y-%m-%d-%H-%M-%S')
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Hill Cipher-RSA Cryptographic System"))
        self.groupBox.setTitle(_translate("MainWindow", "Function"))
        self.encBox.setText(_translate("MainWindow", "Encryption"))
        self.decBox.setText(_translate("MainWindow", "Decryption"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Generate Key Pair"))
        self.rsaBtn.setText(_translate("MainWindow", "RSA "))
        self.groupBox_3.setTitle(_translate("MainWindow", "Load Image"))
        self.searchBtn.setText(_translate("MainWindow", "Search"))
        self.groupBox_4.setTitle(_translate("MainWindow", "Real Image"))
        self.groupBox_5.setTitle(_translate("MainWindow", "Cipherimage"))
        self.pubkeyBtn.setText(_translate("MainWindow", "Upload PubKey"))
        self.privkeyBtn.setText(_translate("MainWindow", "Upload PrivKey"))
        self.cipherkeyBtn.setText(_translate("MainWindow", "Upload Cipherkey"))
        self.processBtn.setText(_translate("MainWindow", "Process"))

    def getImage(self, btn):
        #membuka file dialog
        self.fname = QFileDialog.getOpenFileName(self, 'Open file','c:\\', "Image files (*.png )")

        #menegecek file
        if self.fname != ('', ''):
            self.searchBar.setText('{}'.format(self.fname))
            self.imagePath = self.fname[0]
            self.data = Image.open(self.imagePath)
            self.data = np.asarray(self.data, dtype=np.uint8)
            if self.encBox.isChecked():
                self.data = Image.open(self.imagePath)
                self.data = np.asarray(self.data, dtype=np.uint8)
                pixmap = QPixmap(self.imagePath)
                pixmap = pixmap.scaled(self.encLbl.width(),self.encLbl.height())
                self.encLbl.setPixmap(QPixmap(pixmap))
            elif self.decBox.isChecked():
                pixmap = QPixmap(self.imagePath)
                pixmap = pixmap.scaled(self.decLbl.width(),self.decLbl.height())
                self.decLbl.setPixmap(QPixmap(pixmap))

    def checkBox(self, state):
        if state == Qt.Checked:
            if self.sender() == self.encBox:
                self.searchBar.clear()
                self.encLbl.clear()
                self.decLbl.clear()
                self.decBox.setChecked(False)
                self.privkeyBtn.setEnabled(False)
                self.cipherkeyBtn.setEnabled(False)
                self.pubkeyBtn.setEnabled(True)

            elif self.sender() == self.decBox:
                self.searchBar.clear()
                self.encLbl.clear()
                self.decLbl.clear()
                self.encBox.setChecked(False)
                self.pubkeyBtn.setEnabled(False)
                self.privkeyBtn.setEnabled(True)
                self.cipherkeyBtn.setEnabled(True)
        elif state == Qt.Unchecked:
            if self.sender() == self.encBox:
                self.searchBar.clear()
                self.encLbl.clear()
                self.decLbl.clear()
                self.privkeyBtn.setEnabled(True)
                self.cipherkeyBtn.setEnabled(True)
                self.pubkeyBtn.setEnabled(True)

            elif self.sender() == self.decBox:
                self.searchBar.clear()
                self.encLbl.clear()
                self.decLbl.clear()
                self.pubkeyBtn.setEnabled(True)
                self.privkeyBtn.setEnabled(True)
                self.cipherkeyBtn.setEnabled(True)


    def generateHillKey(self):
        KEYSIZE = 3
        self.key = None
        key_inv = None

        #mengambil random nilai matriks kunci hill
        while key_inv is None:
            self.key = np.random.randint(10, size=(KEYSIZE,KEYSIZE))
            key_inv = self.inv_matrix(self.key)

        #menyimpan kunci hill
        self.saveKey = np.array(self.key)
        self.save_key =[]
        for x in self.saveKey:
            self.save_key.extend(x)
        self.save_key = str(self.save_key)[1:-1]
        fo = open('hillkey' + self.DATESTRING + '.txt', 'w')
        fo.write('%s' % (self.save_key))
        fo.close()

    def generateRSAKey(self):
        #mengecek bilangan prima
        prime = lambda x : [i for i in range(1,x) if [i%j for j in range(2,i//2)].count(0)==0]
        MAX_PRIME = 1000

        #mengambil nilai random prima untuk p dan q
        p = random.choice(prime(MAX_PRIME)[10:])
        q = p

        #proses mengambil nilai p dan q yang berbeda
        while (q == p):
            q = random.choice(prime(MAX_PRIME)[10:])
        n = p*q
        f = (q-1)*(p-1)
        while True:
            i = random.randint(2, f-1)
            if gcd(i, f) == 1:
                e = i
                break
        while (f*i+1)%e != 0:
            i+=1
        d = (f*i+1)//e
        public_key = (n, e)
        private_key =(n, d)

        #menyimpan kunci publik dan private
        fo = open('pubkey' + self.DATESTRING + '.txt', 'w')
        fo.write('%s\n%s' % (public_key[0], public_key[1]))
        fo.close()
        fo = open('privkey' + self.DATESTRING + '.txt', 'w')
        fo.write('%s\n%s' % (private_key[0], private_key[1]))
        fo.close()

    def inv_matrix(self, key):
        #mencari nilai invers dari kunci hill
        try:
            s = sp.Matrix(key)
            key_inv = np.array(s.inv_mod(256)).astype(int)
            return key_inv
        except:
            key_inv = None
            return key_inv

    def getKey(self):
        #membuka file dialog
        self.fkey = QFileDialog.getOpenFileName()
        if self.fkey != ('', ''):
            path = self.fkey[0]

            self.fKey = open(path, 'r')
            self.fKey = self.fKey.readlines()

    def getKey1(self):
        self.rkey = QFileDialog.getOpenFileName()
        if self.rkey != ('', ''):
            path = self.rkey[0]

            self.rKey = open(path, 'r')
            self.rKey = self.rKey.readlines()

    def enkripsi_hill(self):
        t1 = time.time()
        #E = P x K
        cipherimage= np.dot(self.data, self.key)
        # E = E % 256
        cipherimage = cipherimage % 256
        #Mengubah ke tipe data uin8(0-255)
        cipherimage = np.uint8(cipherimage)
        #Menyimpan gambar
        imageio.imwrite('enkripsi' + self.DATESTRING + '.png', cipherimage)
        #enkripsi kunci hill
        d = int(self.fKey[1])
        n = int(self.fKey[0])
        keyTarget = self.matrix_to_str(self.key)
        keyTarget = self.konversi_ascii(keyTarget)
        encrypt_key = self.enkripsi_rsa(keyTarget, d, n)
        #menyimpan cipherkey
        encrypt_key = str(encrypt_key)[1:-1]
        fo = open('cipherkey' + self.DATESTRING + '.txt', 'w')
        fo.write('%s' % (encrypt_key))
        fo.close()
        im = cipherimage
        im = QImage(im.data, im.shape[1], im.shape[0], im.shape[1]*3, QImage.Format_RGB888)
        pixmap = QPixmap(im).scaled(self.decLbl.width(),self.decLbl.height())
        self.decLbl.setPixmap(pixmap)
        t2 = time.time()
        print(t2-t1)


    def dekripsi_hill(self):
        t1 = time.time()
        #mengambil nilai matrik kunci dari file
        hillkey = self.fKey[0]
        hillkey = hillkey.split(',')
        hillkey = [int(i) for i in hillkey]
        #mengambil nilai kunci private dan dekripsi kunci hill
        e = int(self.rKey[1])
        n = int(self.rKey[0])
        lp = self.dekripsi_rsa(hillkey,e,n)
        #mengubah ascii to char (49 => '1')
        lp = [chr(a) for a in lp]
        #mengubah char to int ('1' => 1)
        lp = [int(i) for i in lp]
        lp = self.list_to_matrix(lp)
        lp = np.asarray(lp)
        lp = self.inv_matrix(lp)
        #enkripsi ciphergambar menjadi gambar asli
        plainimage= np.dot(self.data, lp)
        #D = D % 256
        plainimage = plainimage % 256
        #Mengubah ke tipe data uin8(0-255)
        plainimage = np.uint8(plainimage)
        #Menyimpan gambar
        imageio.imwrite('dekripsi' + self.DATESTRING + '.png', plainimage)
        im = plainimage
        im = QImage(im.data, im.shape[1], im.shape[0], im.shape[1]*3, QImage.Format_RGB888)
        pixmap = QPixmap(im).scaled(self.encLbl.width(),self.encLbl.height())
        self.encLbl.setPixmap(pixmap)
        t2 = time.time()
        print(t2-t1)

    #mengubah key matriks menjadi list
    def matrix_to_str(self, m):
        keyTarget =[]
        for x in m:
            keyTarget.extend(x)
        #mengubah int ke str (1 => '1')
        keyTarget = [str(i) for i in keyTarget]
        return keyTarget

    #mengubah str menjadi ascii character
    def konversi_ascii(self, p):
        ld=[]
        ls=list(p)
        n=len(ls)
        for i in range(0,n):
            ld.append(ord(ls[i]))
        return ld

    def enkripsi_rsa(self, ld, d ,n) :
        m=len(ld)
        lc=[]
        for i in range(0,m):
            j=pow(ld[i],d,n)
            lc.append(j)
        return(lc)


    def dekripsi_rsa(self, lc, e, n):
        mi=len(lc)
        lp=[]
        for i in range(0,mi):
            j=pow(lc[i],e,n)
            lp.append(j)
        return(lp)

    #mengubah list menjadi matriks
    def list_to_matrix(self, l):
        matrix=[]
        while l != []:
            matrix.append(l[:3])
            l=l[3:]
        return matrix

    def crypto(self):
        if self.encBox.isChecked():
            self.generateHillKey()
            self.enkripsi_hill()
        elif self.decBox.isChecked():
            self.dekripsi_hill()

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
